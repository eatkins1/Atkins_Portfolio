---
title: "Interactive Counties Map of New Jersey"
author: "Taylor Atkins"
format:
  html:
    self-contained: true
    code-fold: true
    code-tools: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(tigris)
library(sf)
library(tidycensus)
library(htmltools)
library(janitor)
library(here)
library(mapview)
library(leafsync)
library(leaflet.extras2)
options(tigris_class = "sf")


```

# Interactive Maps with MapView Package

This page details the creation of an interactive map through R. This is meant as an example of how R and my work in it can be applied for journalistic works. For the data tonight we'll be using the tidycensus package to pull both census data, as well as geospatial boundaries.

```{r}
#This block is just establishing an access key to use the US census
# uncomment to run, then recomment it out so you don't run it every time

# census_api_key("2a6f8c21a30d3024e038d67d7d4eba647dc79cd4", install=TRUE)


```

```{r}
#This selects the variables that are going to be displayed on the final map
myvars <- c(totalpop = "B01003_001",
            medincome = "B19013_001",
            medage = "B01002_001"
)
```

```{r}
#pulls the information for all the counties in New Jersey, this was selected because of it being my home state
nj_counties_withgeo <- get_acs(geography = "county",
                       variables = c(myvars),
                       state = "NJ",
                       output = "wide",
                       geometry = TRUE)

nj_counties_withgeo
```

```{r}
#This removes the "M" at the end of some variables that were automatically pulled from the census
nj_counties_withgeo <- nj_counties_withgeo %>%
  select(-ends_with("M"))

nj_counties_withgeo
```

```{r}
#This removes the "E" at the end of some variables that were automatically pulled from the census
colnames(nj_counties_withgeo) <- sub("E$", "", colnames(nj_counties_withgeo)) # $ means end of string only

nj_counties_withgeo
```

Mapping New Jersey counties with mapview

```{r}
#this is the first map generated using mostly defaults of the mapView package
mapview(nj_counties_withgeo, zcol = "medincome")



```

Customize colors

```{r}
#this customizes the colors used for the variables on the map in this case using green hues
mapview(nj_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1)



```

This map's dark background appeared automatically, because mapview determined the map included a lot of light colors. You can turn off that feature.

```{r}
#this deactivates the automated selection of background of the map
mapviewOptions("basemaps.color.shuffle" = FALSE)


```

```{r}

mapview(nj_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1)



```

Two maps together

```{r}
#This makes two seperate maps one for medium income and one for median age one used greens hues and the other blue
map_income <- mapview(nj_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1)

map_age <- mapview(nj_counties_withgeo, zcol = "medage", 
         col.regions = RColorBrewer::brewer.pal(9, "Blues"), 
         alpha.regions = 1)


```

```{r}

sync(map_income, map_age)


```

Side-by-side slider to compare the two, from the leaflet.extras2 package

```{r}
#This enables a slider to shift the singular map between the two different variables
map_income | map_age


```

To turn off legends, hover text, popups

```{r}
#This removes the default legend and popups from the mapView package
mapview(nj_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1,
         legend = FALSE, 
         label = FALSE, 
         popup = FALSE)


```

Customize labels

```{r}
#This adds in new customized labels
mylabel <- glue::glue("{nj_counties_withgeo$NAM} {nj_counties_withgeo$medincome}")


mapview(nj_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1,
         label = mylabel)

```

Customize popups

```{r}
#This generates customized popups that are neater than the default
mypopup <- glue::glue("<strong>{nj_counties_withgeo$NAM}</strong><br />
                      Total Population: {nj_counties_withgeo$totalpop}<br />
                      Median Income: ${nj_counties_withgeo$medincome}<br />
                      Median Age: {nj_counties_withgeo$medage}") %>% 
  lapply(htmltools::HTML)

# mylabel <- glue::glue("{all_data$State} {all_data$PctChange10_20}%") %>%
#   lapply(htmltools::HTML)

```

```{r}

head(mypopup)

```

```{r}
#This incorporates the popups into the maps
mapview(nj_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1,
         popup = mypopup,
         label = mylabel)

```
